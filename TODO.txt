BUGS
====
Need a better way to tell the user to install their own gems locally.
    Maybe run 'rake gems', see what's not installed, and inform the user.
I don't like the way git sends lots of "got" and "walk" messages to stderr.


TO CONSIDER
===========
Break this up into several smaller templates?
    Then use 'rake rails:template LOCATION=~/template.rb' to load them all.
        Can we run that rake task from within the main template? I don't see why not.
    Or use load_template (apply in Rails 3).


TODO
====
Add hobofields >= 1.0.0.
    Will want to use --skip-migration when using model or scaffold generators.
    Make models look like this:
        class BlogPost < ActiveRecord::Base
          fields do
            title :string # Other types: password, email_address, html, textile, markdown, boolean, date, datetime, float, integer, big_integer, decimal
            body  :text, :default => ''
            name  :string, :unique, :required
            price :decimal, :scale => 4, :precision => 4
            quantity :integer, :limit => 4
            timestamps
          end
        end
    Run ./script/genearte hobo_migration.
        NOTE: It may ask you to verify if something was renamed.
    Check/edit the migration.
    Run rake db:migrate.
Add show_for >= 0.2.0.
Add to config/environments/development.rb:
    # Log database access to the console. From http://rubyquicktips.tumblr.com/post/379756937/always-turn-on-activerecord-logging-in-the-console
    if "irb" == $0
      ActiveRecord::Base.logger = Logger.new(STDOUT)
    end
    Or add this to ~/.irbrc:
        ActiveRecord::Base.logger = Logger.new(STDOUT) if Object.const_defined?('ActiveRecord')
Consider adding RailRoad (http://railroad.rubyforge.org/) to generate model diagrams.
    Requires GraphViz.
    Perhaps just create a doc:diagram:model rake task that looks for it.
Add some CSS.
    Make formtastic stuff look presentable.
        form.formtastic fieldset ol li {display: block}
        li.string input is set to width:74%, but li.password input is not.
        remove (most padding-left from fieldset.buttons)

Use Warden and Devise for authentication.
    Add include Devise::TestHelpers to Controller and View specs (but not integration specs).
Test using Clearance.
    Add before_filter :authenticate to controllers we need to protect.
    Add to app_controller:
      private
      def sign_in(user)
        # store current time to display "last signed in at" message
        user.update_attribute(:last_signed_in_at, Time.now)
        super user
      end
    end
    Go to pages for /sign_up, /sign_in, /sign_out, /users/1/password, /users/1/password/edit, /users/1, 
    By default, allows users to sign up (/sign_up == /users/new) themselves.
    Need to create a route for our own user-management stuff (users show/index/edit)
        Or just create the route for ALL of user, and then:
            class UsersController < Clearance::UsersController
            end
    Need to use attr_accessible :first_name, :last_name, ... on User model.

Work on CrudViews:
    Create simple show_for, index_for.

Improve initial deployment.
    Have cap deploy:setup prompt for database name/user/password, and build the shared database.yml instead of just leaving a blank one.
Flesh out generators; use Shoulda and RSpec 'it' syntax.
    Name the generator "crud_resource", have it do model, controller, route.
        Also "crud_controller" (no model), "crud_model", "crud_route".
Test/refactor my custom RSpec stuff.
Make sure we have a favicon (both that we defined in application layout) and robots.txt.
    Make sure app will run "out of the box" without errors or missing files.
Delete the default routes in config/routes.rb file.
Semi-manual testing. (Make this a rake task, to augment the default test.)
    rm -rf test/rails_site
    rails -m ./rails-template.rb test/rails_site
    # Answer prompts.
    cd test/rails_site
    ./script/server -p 9070 &
    open http://127.0.0.1:9070
    # Test the site functionality.
    kill %
    ./script/generate rspec_model thing name:string age:integer admin:boolean
    rake db:migrate
    ./script/generate rspec_controller things
    # Add to config/routes.rb: map.resources 'things', :member => { :delete => :get }
    # Edit app/controllers/things_controller.rb, to add crud_actions.
    mkdir app/views/default
    # Create and edit app/views/default/index.html.erb: <pre><%= crud.items.to_yaml %></pre>
    # Create and edit app/views/default/new.html.erb: <% semantic_form_for crud.item do |form| %><%= form.inputs + form.buttons %><% end %>
    ./script/server -p 9070 &
    open http://localhost:9070/things
    open http://localhost:9070/things/new
    # Test the site functionality.
    kill %
Pull in BaseHTML stuff.
    HTML fragments
        Tables
        Forms
    CSS fragment
        Tables
        Forms
Upgrade to hoptoad_notifier gem.
    generate hoptoad --api-key your_key_here
    HoptoadNotifier.configure do |config|
      config.api_key 'your_key_here'
    end
jQuery functionality
    Extract my BoochTek jQuery extensions into a separate repository.
        Put them in a 'boochtek' sub-directory, pull that in via git submodule.
    Autogrow all TEXTAREAs.
        Git clone the github repo (http://github.com/akaihola/jquery-autogrow).
            Note that the code has not been updated in well over a year.
                Despite bug reports and patches at http://plugins.jquery.com/project/issues/autogrow?categories=support&states=all.
        Include the following in application.js:
            if ( jQuery.fn['autogrow'] ) jQuery('textarea').autogrow();
    Pagination.
    Validation.
        How do we tell the view to add required and data-type attributes to INPUT elements?
    Column sorting.
    Look into jqGrid.
Figure out what to do about GEM version numbers.
    Should we be using git submodules, and pulling straight from github?
        I'd rather use shared system GEMs, in most cases.
Add more plugins:
    AuthLogic (was considering RPX for OpenID, but it's a pay site for most uses)
    Automated validations, pulled from DB (DrySQL, Magic???, validation_reflection (valirefl), ???)
    Annotate-models, ColumnComments, or my own annotation/labeling system. (Only if AR is enabled.)
    Auto-migrations?
    Machinist (fork that handles DM) instead of FactoryGirl (which already handles DataMapper, as long as you require dm-validations)?
    jRails (maybe, or just use hand-written jQuery) - probably include it just in case.
    Exceptional (in addition to HopToad and ExceptionNotifier).
    http://github.com/engineyard/rails_metrics - metrics pulled from ActiveSupport notifications.
Allow SVN instead of GIT. (Still pull from GIT, but use SVN after that.)
Add custom generator for Blue Ridge javascript_specs.
    What's wrong with the ones that come with Blue Ridge?
        I probably wanted to include more default functionality -- just not sure what I could add that would be pertinent for all tests.
        Might want to add jQuery.
More rake tasks.
    git:pre_commit
    spec:javascripts - blue-ridge says it adds it, but only adds test:javascripts
    jquery:download
    jquery:update
    css:compress (asset:packager:build_all should cover this)
    javascript:compress (asset:packager:build_all should cover this)
Grab some more ideas from BigOldRailsTemplate.


From DataMapper/extlib
======================
# Methods I like, pulled from http://github.com/datamapper/extlib/.
# TODO/FIXME: Need to guard against redefining these.
# NOTE: If we define in?, we can get rid of the RSpec be_in matcher.
class Object
  def meta_class() class << self; self end end
  def in?(arrayish,*more)
    arrayish = more.unshift(arrayish) unless more.empty?
    arrayish.include?(self)
  end
  def blank?
    nil? || (respond_to?(:empty?) && empty?)
  end
end
module ObjectSpace
  class << self
    def classes
      klasses = []
      ObjectSpace.each_object(Class) {|o| klasses << o}
      klasses
    end
  end
end
class NilClass
  def blank?
    true
  end
end
class TrueClass
  def blank?
    false
  end
end
class FalseClass
  def blank?
    true
  end
end
class Numeric
  def blank?
    false
  end
end
class Pathname
  def /(path)
    (self + path).expand_path
  end
end
class String
  def blank?
    strip.empty?
  end
  def /(o)
    File.join(self, o.to_s)
  end
end
require 'date'
class DateTime
  def to_time
    Time.parse self.to_s
  end
end
class Time
  def to_datetime
    DateTime.new(year, month, day, hour, min, sec, Rational(gmt_offset, 24 * 3600))
  end
end

