ASAP
====

* Add a default code of conduct.
    * http://contributor-covenant.org/version/1/3/0/code_of_conduct.md
        * Requires editing to add our info.
    * http://todogroup.org/opencodeofconduct/
        * Can reference by URL that will add in our info.
* Get rid of GC checking.
* Use Puma instead of Unicorn.
* Create a default application.js, so we don't see an error in DEV logs.


SOON
====

* Add SimpleForm or Formtastic.
* Add JS classes to HTML tag.
  * Include 'no-js' class in the markup.
  * Have JavaScript remove the 'no-js' class and add a 'js' class.
    * Modernizr (and hence HTML5 Boilerplate) does this already.
      * Modernizr also adds a ton of other classes, 1 for each feature it detects.
  * Also consider having JavaScript add ie7 and ie8 tags if CSS requires them.
    * Better to use Modernizr to detect features instead of browsers though.
* Use Bower (or something similar) to manage JS (and CSS) assets.
  * Consider rails-assets.org method.
    * Tricks Bundler into pulling from NPM.
  * Include these components (if not already included):
    * normalize-css
  * See these links for more info:
    * http://www.iconoclastlabs.com/blog/bower-and-rails-4
    * https://coderwall.com/p/hhaxlg
    * http://kaeff.net/posts/sprockets-bower-better-component-packaging-for-rails-asset-pipeline.html
    * https://github.com/42dev/bower-rails
    * http://stackoverflow.com/questions/16266528/how-to-manage-javascript-dependencies-with-bower-in-rails-apps
    * https://shellycloud.com/blog/2013/09/how-to-manage-front-end-packages-in-rails-with-bower
* Updates to HTML template. (Look to see what HTML5 Boilerplate looks like these days.)
  * Add viewport meta tag.
    * <meta name="viewport" content="width=device-width, initial-scale=1">
  * Add apple-touch-icon.
* Use better_errors, if they come out with a Rails 4.2 version.
  * Rails 4.2 includes Web Console, which does what the REPL part of better_errors does.
  * I believe better_errors has now been fully incorporate into Rails.
* Use Sequel ORM.
* Ask which DB to use.
  * For PROD and non-PROD.


Later
=====

* Split into separate files within recipes directory.
  * Use Thor's apply() action.
* Use Sneakers (and RabbitMQ) instead of Sidekiq (and Redis).
* Use Perpetuity / Virtus::Perpetuity when it's ready.
* Use Virtus::ActiveRecord when it's ready.
* Use ROM when it's ready.


BUGS
====
Getting an error when we call 'generate controller':
    /Users/booch/Work/Projects/rails-template/name_of_your_new_rails_app/vendor/bundle/ruby/1.9.1/gems/activesupport-4.0.0/lib/active_support/dependencies.rb:228:in `require':
        cannot load such file -- rails_generator/generators/components/controller/controller_generator (LoadError)



Ideas
=====

Add show_for >= 0.2.0.

Add hobofields >= 1.0.0.
    Will want to use --skip-migration when using model or scaffold generators.
    Make models look like this:
        class BlogPost < ActiveRecord::Base
          fields do
            title :string # Other types: password, email_address, html, textile, markdown, boolean, date, datetime, float, integer, big_integer, decimal
            body  :text, :default => ''
            name  :string, :unique, :required
            price :decimal, :scale => 4, :precision => 4
            quantity :integer, :limit => 4
            timestamps
          end
        end
    Run ./script/genearte hobo_migration.
        NOTE: It may ask you to verify if something was renamed.
    Check/edit the migration.
    Run rake db:migrate.

Add some CSS.
    Make formtastic stuff look presentable.
        form.formtastic fieldset ol li {display: block}
        li.string input is set to width:74%, but li.password input is not.
        remove (most padding-left from fieldset.buttons)

Use Warden and Devise for authentication.
    Add include Devise::TestHelpers to Controller and View specs (but not integration specs).

Work on CrudViews:
    Create simple show_for, index_for.

Improve initial deployment.
    Have cap deploy:setup prompt for database name/user/password, and build the shared database.yml instead of just leaving a blank one.

Flesh out generators; use Shoulda and RSpec 'it' syntax.
    Name the generator "crud_resource", have it do model, controller, route.
        Also "crud_controller" (no model), "crud_model", "crud_route".

Test/refactor my custom RSpec stuff.

Delete the default routes in config/routes.rb file.

Semi-manual testing. (Make this a rake task, to augment the default test.)
    rm -rf test/rails_site
    rails -m ./rails-template.rb test/rails_site
    # Answer prompts.
    cd test/rails_site
    ./script/server -p 9070 &
    open http://127.0.0.1:9070
    # Test the site functionality.
    kill %
    ./script/generate rspec_model thing name:string age:integer admin:boolean
    rake db:migrate
    ./script/generate rspec_controller things
    # Add to config/routes.rb: map.resources 'things', :member => { :delete => :get }
    # Edit app/controllers/things_controller.rb, to add crud_actions.
    mkdir app/views/default
    echo > app/views/default/index.html.erb '<pre><%= crud.items.to_yaml %></pre>'
    echo > app/views/default/new.html.erb '<% semantic_form_for crud.item do |form| %><%= form.inputs + form.buttons %><% end %>'
    echo > app/views/default/show.html.erb '<pre><%= crud.item.to_yaml %></pre>'
    ./script/server -p 9070 &
    open http://localhost:9070/things
    open http://localhost:9070/things/new
    # Test the site functionality.
    kill %

Pull in BaseHTML stuff.
    HTML fragments
        Tables
        Forms
    CSS fragment
        Tables
        Forms
        Pagination

Upgrade to hoptoad_notifier gem.
    generate hoptoad --api-key your_key_here
    HoptoadNotifier.configure do |config|
      config.api_key 'your_key_here'
    end

jQuery functionality
    Polyfills.
        Auto-focus.
        Placeholder.
        Autogrow all TEXTAREAs.
            Git clone the github repo (http://github.com/akaihola/jquery-autogrow).
                Note that the code has not been updated in well over a year.
                    Despite bug reports and patches at http://plugins.jquery.com/project/issues/autogrow?categories=support&states=all.
            Include the following in application.js:
                if ( jQuery.fn['autogrow'] ) jQuery('textarea').autogrow();
    Extract my BoochTek jQuery extensions into a separate repository.
    Pagination.
        Including CSS.
    Validation.
        How do we tell the view to add required and data-type attributes to INPUT elements?
    Column sorting.
    Look into jqGrid or dataTables.

Add more plugins:
    Automated validations, pulled from DB (DrySQL, Magic???, validation_reflection (valirefl), ???)
    Annotate-models, ColumnComments, or my own annotation/labeling system. (Only if AR is enabled.)
    Auto-migrations? Hobo_Fields does this for us.
    Machinist (fork that handles DM) instead of FactoryGirl (which already handles DataMapper, as long as you require dm-validations)?
    Exceptional (in addition to Airbrake and ExceptionNotifier).
    http://github.com/engineyard/rails_metrics - metrics pulled from ActiveSupport notifications.

Add custom generator for Blue Ridge javascript_specs.
    What's wrong with the ones that come with Blue Ridge?
        I probably wanted to include more default functionality -- just not sure what I could add that would be pertinent for all tests.
        Might want to add jQuery.

More rake tasks.
    git:pre_commit
    spec:javascripts - blue-ridge says it adds it, but only adds test:javascripts
    jquery:download
    jquery:update
    css:compress (asset:packager:build_all should cover this)
    javascript:compress (asset:packager:build_all should cover this)

Grab some more ideas from BigOldRailsTemplate.

Consider adding RailRoad (http://railroad.rubyforge.org/) to generate model diagrams.
    Requires GraphViz.
    Perhaps just create a doc:diagram:model rake task that looks for it.


From DataMapper/extlib
======================
# Methods I like, pulled from http://github.com/datamapper/extlib/.
# TODO/FIXME: Need to guard against redefining these.
# NOTE: If we define in?, we can get rid of the RSpec be_in matcher.
class Object
  def meta_class() class << self; self end end
  def in?(arrayish,*more)
    arrayish = more.unshift(arrayish) unless more.empty?
    arrayish.include?(self)
  end
  def blank?
    nil? || (respond_to?(:empty?) && empty?)
  end
end
module ObjectSpace
  class << self
    def classes
      klasses = []
      ObjectSpace.each_object(Class) {|o| klasses << o}
      klasses
    end
  end
end
class NilClass
  def blank?
    true
  end
end
class TrueClass
  def blank?
    false
  end
end
class FalseClass
  def blank?
    true
  end
end
class Numeric
  def blank?
    false
  end
end
class Pathname
  def /(path)
    (self + path).expand_path
  end
end
class String
  def blank?
    strip.empty?
  end
  def /(o)
    File.join(self, o.to_s)
  end
end
require 'date'
class DateTime
  def to_time
    Time.parse self.to_s
  end
end
class Time
  def to_datetime
    DateTime.new(year, month, day, hour, min, sec, Rational(gmt_offset, 24 * 3600))
  end
end
